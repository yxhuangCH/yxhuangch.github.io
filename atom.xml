<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yxhuang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yxhuangch.github.io/"/>
  <updated>2018-09-12T15:22:40.000Z</updated>
  <id>https://yxhuangch.github.io/</id>
  
  <author>
    <name>yxhuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 注解</title>
    <link href="https://yxhuangch.github.io/2018/09/12/java-annotation/"/>
    <id>https://yxhuangch.github.io/2018/09/12/java-annotation/</id>
    <published>2018-09-12T15:15:22.000Z</published>
    <updated>2018-09-12T15:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-注解"><a href="#Java-注解" class="headerlink" title="Java 注解"></a>Java 注解</h2><p>了解 Java 注解，对于我们了解 JavaPoet, ARouter, Butterknife 这些开源库是必须的。<br>同时也可以结合 Android 中独有的注解，一起看，会加深理解。我之前写过<br><a href="https://blog.csdn.net/yxhuang2008/article/details/71330637" target="_blank" rel="noopener">Android 中的注解</a> 一文。</p><p>以下是正题：</p><p>注解是那些插入到源码中使用其他工具可以对其进行处理的便签。这些工具可以在源码层次上进线操作，或者可以出来编译在其中放置了注解的类文件。</p><p>This allows annotations to be retained by Java VM at run-time and read via reflection。[1]</p><p>Annotation are tags or meta-data, which can be inserted in to source code. So that it could be process at runtime and can take decision according to that annotations。[2]</p><h3 id="1-注解的语法"><a href="#1-注解的语法" class="headerlink" title="1. 注解的语法"></a>1. 注解的语法</h3><p>注解是由注解接口定义的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">modifiers <span class="meta">@interface</span> AnnotationName&#123;</span><br><span class="line">    <span class="function">type <span class="title">elementName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="function">type <span class="title">elementName</span><span class="params">()</span> <span class="keyword">default</span> value</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BugReport&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">severity</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">String <span class="title">assignedTo</span><span class="params">()</span> <span class="keyword">default</span> "[none]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注解的类型"><a href="#2-注解的类型" class="headerlink" title="2. 注解的类型"></a>2. 注解的类型</h3><table><thead><tr><th>用于编译的注解</th><th>作用</th></tr></thead><tbody><tr><td>@Deprecated</td><td>用于不再鼓励使用的项</td></tr><tr><td>@SuppressWarning</td><td>阻止某个给定类型的警告信息</td></tr><tr><td>@Override</td><td>检查改方法是否覆盖了某一个超类方法</td></tr><tr><td>@Generated</td><td>作为代码生成工具使用</td></tr></tbody></table><p><br></p><table><thead><tr><th>用于管理资源的注解</th><th>作用</th></tr></thead><tbody><tr><td>@PostConstruct</td><td>被标记的方法应该在构造之后立即被调用</td></tr><tr><td>@PreDestroy</td><td>被标记的方法应该在被移除之前立即被调用</td></tr><tr><td>@Resource</td><td>用于资源的注入</td></tr></tbody></table><p><br></p><table><thead><tr><th>元注解</th><th>作用</th></tr></thead><tbody><tr><td>@Target</td><td>指明可以应用这个注解的那些项</td></tr><tr><td>@Retention</td><td>指明这个注解可以保留多久</td></tr><tr><td>@Documented</td><td>指明这个注解应该包含在注解项的文档中</td></tr><tr><td>@Inherited</td><td>指明这个注解应用与一个类的时候，能够自动被它的子类继承</td></tr></tbody></table><p><br></p><h5 id="Target-注解的元素类型"><a href="#Target-注解的元素类型" class="headerlink" title="@Target 注解的元素类型"></a>@Target 注解的元素类型</h5><table><thead><tr><th>元素类型</th><th>注解适用场合</th></tr></thead><tbody><tr><td>TYPE</td><td>类（包括 enum）及接口（包括注解类型）</td></tr><tr><td>ANNOTATION_TYPE</td><td>注解类型声明</td></tr><tr><td>PACKAGE</td><td>包</td></tr><tr><td>METHOD</td><td>方法</td></tr><tr><td>CONSTRUTOR</td><td>构造器</td></tr><tr><td>FIELD</td><td>成员域（包括 enum 常量）</td></tr><tr><td>PARAMETER</td><td>方法或构造参数</td></tr><tr><td>LOCAL_VARIABLE</td><td>局部变量</td></tr></tbody></table><p><br></p><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>用于指定一条注解应该保留多长时间</p><table><thead><tr><th>保留规则</th><th>描述</th></tr></thead><tbody><tr><td>SOURCE</td><td>不包括在类文件中的注解</td></tr><tr><td>CLASS</td><td>包括在类文件中的注解，但是虚拟机不需要将它们载入</td></tr><tr><td>RUNTIME</td><td>包括在类文件中的注解，并由虚拟机载入。通过反射API 可获得它们</td></tr></tbody></table><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActionListener &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-注解处理器类库"><a href="#3-注解处理器类库" class="headerlink" title="3. 注解处理器类库"></a>3. 注解处理器类库</h3><h5 id="1-java-lang-reflectAnnotatedElement"><a href="#1-java-lang-reflectAnnotatedElement" class="headerlink" title="1. java.lang.reflectAnnotatedElement"></a>1. java.lang.reflectAnnotatedElement</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果该项具有给定类型的注解，则返回 true</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">&lt;T extends Annotation&gt; T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationType)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取给定类型的注解, 如果垓项目不具有这样的注解，则返回 Null</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Annotation[] <span class="title">getAnnotation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取该项的所有注解，包括继承而来的注解.如果没有出现任何注解，则返回一个长度为 0 的数组</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Annotation[] <span class="title">getDeclaredAnnotation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取该项的所有注解，不包括继承而来的注解.如果没有出现任何注解，则返回一个长度为 0 的数组</span></span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; testClass = Class.forName(className);</span><br><span class="line">    Object object = testClass.newInstance();</span><br><span class="line">    Method[] methods = testClass.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(Test.class))&#123;</span><br><span class="line">            Test annotation = method.getAnnotation(Test.class);</span><br><span class="line">            Class&lt;? extends Exception&gt; expectedClass = annotation.Expected();</span><br><span class="line">            <span class="keyword">if</span> (expectedClass != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(object);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getTargetException().getClass() == expectedClass)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"Test Case Pass With Custom Exception"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-AbstractProcessor"><a href="#2-AbstractProcessor" class="headerlink" title="2. AbstractProcessor"></a>2. AbstractProcessor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Filer mFiler;</span><br><span class="line">    <span class="keyword">private</span> Elements mElementUtils;</span><br><span class="line">    <span class="keyword">private</span> Messager mMessager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line"></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        mElementUtils = processingEnv.getElementUtils();</span><br><span class="line">        mMessager = processingEnv.getMessager();</span><br><span class="line"></span><br><span class="line">        mGenerationClass = <span class="keyword">new</span> GenerationClass();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(MyAnnotation.class.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h4><ol><li>Wiki 中的 <a href="https://en.wikipedia.org/wiki/Java_annotation" target="_blank" rel="noopener">Java annotation</a>；</li><li>《Java 核心技术 卷 II 》第十章 注解部分；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-注解&quot;&gt;&lt;a href=&quot;#Java-注解&quot; class=&quot;headerlink&quot; title=&quot;Java 注解&quot;&gt;&lt;/a&gt;Java 注解&lt;/h2&gt;&lt;p&gt;了解 Java 注解，对于我们了解 JavaPoet, ARouter, Butterknife 这
      
    
    </summary>
    
    
      <category term="java" scheme="https://yxhuangch.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JavaPoet 和 Java 注解在 Android 中的应用</title>
    <link href="https://yxhuangch.github.io/2018/09/09/JavaPoet-Annotation-in-android/"/>
    <id>https://yxhuangch.github.io/2018/09/09/JavaPoet-Annotation-in-android/</id>
    <published>2018-09-09T13:45:10.000Z</published>
    <updated>2018-09-09T15:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaPoet 结合 Java 注解在很多知名的开源库中都应用，例如 Butterknife 和 ARouter.<br>JavaPoet 是用来生成 .java 文件的，它的使用比较简单，按照官方的示例代码套用就可以了。<br>Java 的注解，有时间会整理，这里先略过。</p><p>我做了一个 Dome 说明它们的应用。<br>先看一下项目的结构。<br><img src="/2018/09/09/JavaPoet-Annotation-in-android/111.png" width="50%" height="50%"></p><p>整个项目包含三个部分：</p><ul><li>app : 主项目，使用我们的注解</li><li>annotationlib: 注解</li><li>javapoetlib： 使用 javaPoet 生成 .java 代码</li></ul><p>下面我们一个个来看</p><h4 id="1-注解"><a href="#1-注解" class="headerlink" title="1. 注解"></a>1. 注解</h4><p>我们先生成一个 java library 生成注解, 这里不能选 android library, 命名为 annotationlib.<br><img src="/2018/09/09/JavaPoet-Annotation-in-android/222.png" width="100%" height="100%"></p><p>它的 build.gradle 文件我们不用修改, 我们看到它是 java-library</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java-library'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">sourceCompatibility </span>= <span class="string">"1.7"</span></span><br><span class="line">targetCompatibility = <span class="string">"1.7"</span></span><br></pre></td></tr></table></figure><p>创建一个名为 MyAnnotation 的接口文件, 它的内容也是非常简单的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">action</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-JavaPoet-生成-java-文件"><a href="#2-JavaPoet-生成-java-文件" class="headerlink" title="2. JavaPoet 生成 .java 文件"></a>2. JavaPoet 生成 .java 文件</h3><p>同样创建一个 java library, 命名为 javapoetlib, 但是它的 build.gradle 文件，我们要修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java-library'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">    compile <span class="title">project</span><span class="params">(<span class="string">':annotationlib'</span>)</span></span></span><br><span class="line"><span class="function">    compile 'com.google.auto.service:auto-service:1.0-rc2'</span></span><br><span class="line"><span class="function">    compile 'com.squareup:javapoet:1.9.0'</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">sourceCompatibility </span>= <span class="string">"1.7"</span></span><br><span class="line">targetCompatibility = <span class="string">"1.7"</span></span><br></pre></td></tr></table></figure><p>我们添加对刚刚创建的 annotationlib 依赖，同时添加 auto-service 和 javapoet.</p><p>我们创建一个 MyProcessor 的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)  <span class="comment">// 需要添加 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Filer mFiler;</span><br><span class="line">    <span class="keyword">private</span> Elements mElementUtils;</span><br><span class="line">    <span class="keyword">private</span> Messager mMessager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACK_NAME = <span class="string">"com.yxhuang.temp"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line"></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        mElementUtils = processingEnv.getElementUtils();</span><br><span class="line">        mMessager = processingEnv.getMessager();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();  <span class="comment">// 版本</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(MyAnnotation.class.getCanonicalName());      <span class="comment">// 注解的类 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"MyProcessor process"</span>);</span><br><span class="line"></span><br><span class="line">        MethodSpec main = MethodSpec.methodBuilder(<span class="string">"main"</span>)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC, Modifier.STATIC) <span class="comment">// 添加标识符 public static</span></span><br><span class="line">                .returns(<span class="keyword">void</span>.class) <span class="comment">// 返回类型</span></span><br><span class="line">                .addParameter(String[].class, <span class="string">"args"</span>) <span class="comment">// 方法的参数</span></span><br><span class="line">                .addStatement(<span class="string">"$T.out.println($S)"</span>, System.class, <span class="string">"Hello World!"</span>)  <span class="comment">// 方法里面的语句声明</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 HelloWorld 类</span></span><br><span class="line">        TypeSpec hellWorld = TypeSpec.classBuilder(<span class="string">"HelloWorld"</span>)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)</span><br><span class="line">                .addMethod(main)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 java 文件</span></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(PACK_NAME, hellWorld).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            javaFile.writeTo(mFiler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的信息，可以看上面代码的注释</p><ul><li>主要是添加 auto 的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br></pre></td></tr></table></figure><ul><li>版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SourceVersion.latestSupported();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.singleton(MyAnnotation.class.getCanonicalName());      <span class="comment">// 注解的类 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 process 方法中使用 JavaPoet 中的方法，生成一个输出 Hello world 的代码，这是一个官方的实例代码，关于 JavaPoet 的使用，可以去  <a href="https://github.com/square/javapoet" target="_blank" rel="noopener">JavaPoet github 主页</a> 去查询。</p><h3 id="3-项目中对注解的使用"><a href="#3-项目中对注解的使用" class="headerlink" title="3. 项目中对注解的使用"></a>3. 项目中对注解的使用</h3><p>在项目中对上面两个 java library 引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    annotationProcessor <span class="title">project</span><span class="params">(<span class="string">':javapoetlib'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">project</span><span class="params">(<span class="string">':annotationlib'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>在 activity 中使用 annoation 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation</span>(action = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在所有的准备工作都做好，我们选择 Make Project 即可，然后我们在 app/build/generated/source/apt/debug 目录下看到生成的 hello world 文件了<br><img src="/2018/09/09/JavaPoet-Annotation-in-android/333.png" width="100%" height="100%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaPoet 结合 Java 注解在很多知名的开源库中都应用，例如 Butterknife 和 ARouter.&lt;br&gt;JavaPoet 是用来生成 .java 文件的，它的使用比较简单，按照官方的示例代码套用就可以了。&lt;br&gt;Java 的注解，有时间会整理，这里先略过
      
    
    </summary>
    
    
      <category term="android" scheme="https://yxhuangch.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>小程序笔记</title>
    <link href="https://yxhuangch.github.io/2018/06/17/miniprogram-note/"/>
    <id>https://yxhuangch.github.io/2018/06/17/miniprogram-note/</id>
    <published>2018-06-17T01:42:15.000Z</published>
    <updated>2018-06-17T06:16:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因公司项目需要，我去做了一个小程序，这中间踩了很多坑，现在有时间整理了一下，一些常用到的点和踩过的坑。<br>个人对 js 不太熟，也是第一次做小程序，有不对的地方，欢迎指出。</p><h4 id="1-小程序的构成"><a href="#1-小程序的构成" class="headerlink" title="1. 小程序的构成"></a>1. 小程序的构成</h4><p>.app.json 对小程序的全局配置<br> 包含 所有页面路径、界面表现、网络超时时间、底部 tab 等<br>. project.config.json  开发配置<br>. 界面 .json 界面配置<br>. wxml 文件 界面布局<br>. wxss 文件 样式配置</p><h4 id="2-Flex-布局"><a href="#2-Flex-布局" class="headerlink" title="2. Flex 布局"></a>2. Flex 布局</h4><p>主要思想：通过设定容器（flex container 即伸缩容器）与子元素（flex item 即伸缩项目）的规则，使所有 view 组件在主轴（main axis） 与侧轴(cross axis) 上合理地自动分配。<br>详细可以参考<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰的博客 Flex 布局教程</a></p><h4 id="3-子元素在-view-中居中"><a href="#3-子元素在-view-中居中" class="headerlink" title="3. 子元素在 view 中居中"></a>3. 子元素在 view 中居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure><h4 id="4-字体划线"><a href="#4-字体划线" class="headerlink" title="4. 字体划线"></a>4. 字体划线</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-decoration</span><span class="selector-pseudo">:line-through</span></span><br></pre></td></tr></table></figure><p><img src="/2018/06/17/miniprogram-note/text_line.jpg" width="50%" height="30%"></p><h4 id="5-单边框线"><a href="#5-单边框线" class="headerlink" title="5.单边框线"></a>5.单边框线</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-width</span>: 1<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">border-top-color</span>: <span class="selector-id">#D3D3D3</span>;</span><br><span class="line"><span class="selector-tag">border-top-style</span>: <span class="selector-tag">solid</span>;</span><br></pre></td></tr></table></figure><h4 id="6-将-View-设为圆形"><a href="#6-将-View-设为圆形" class="headerlink" title="6. 将 View 设为圆形"></a>6. 将 View 设为圆形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 150<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 150<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 50%;</span><br></pre></td></tr></table></figure><h4 id="7-文字省略"><a href="#7-文字省略" class="headerlink" title="7. 文字省略"></a>7. 文字省略</h4><p>. 单行省略</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>; </span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; </span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>; </span><br><span class="line">display: block;  // 不同</span><br></pre></td></tr></table></figure><p>. 多行省略</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>; </span><br><span class="line">-webkit-line-clamp: 2;   // 行数</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; </span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>; </span><br><span class="line">display: -webkit-box;  // 不同</span><br></pre></td></tr></table></figure><p>单行省略和双行省略是的 display 是不一样的</p><h4 id="8-页面跳转传递的参数是对象，则需要利用-app-js-中-globalData-来传递；"><a href="#8-页面跳转传递的参数是对象，则需要利用-app-js-中-globalData-来传递；" class="headerlink" title="8. 页面跳转传递的参数是对象，则需要利用 app.js 中 globalData 来传递；"></a>8. 页面跳转传递的参数是对象，则需要利用 app.js 中 globalData 来传递；</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.json 设置跳转数据</span></span><br><span class="line">setGlobalData: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">this</span>.globalData[n] = obj[n];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始页</span></span><br><span class="line">app.setGlobalData(&#123;</span><br><span class="line">    goods: <span class="keyword">this</span>.data.goodsDetail</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转目标页</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> goods = app.globalData.goods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-改变对象的某个属性"><a href="#9-改变对象的某个属性" class="headerlink" title="9.改变对象的某个属性"></a>9.改变对象的某个属性</h4><p>如果是改变 data 里面的普通值，可以通过 setData 方法直接改变，但是要改变 data 里面对象的属性有所不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">   stepper: &#123;</span><br><span class="line">     stepper: <span class="number">1</span>,</span><br><span class="line">     min:<span class="number">1</span>,</span><br><span class="line">     max:<span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 改变属性值</span></span><br><span class="line">  handleZanStepperChange: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> str = <span class="string">'stepper.stepper'</span>;</span><br><span class="line">   <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">     [str]: e.detail</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="10-wx-if-和-wx-for-同时使用报错"><a href="#10-wx-if-和-wx-for-同时使用报错" class="headerlink" title="10. wx:if 和 wx:for 同时使用报错"></a>10. wx:if 和 wx:for 同时使用报错</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 会报错</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span> <span class="attr">wx:for</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 应该改为</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span>  <span class="attr">wx:for</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11-下拉刷新样式"><a href="#11-下拉刷新样式" class="headerlink" title="11. 下拉刷新样式"></a>11. 下拉刷新样式</h4><p>.头部导航栏加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wx.showNavigationBarLoading();</span><br><span class="line">wx.hideNavigationBarLoading();</span><br></pre></td></tr></table></figure><p>. 三个点样式加载<br>在页面的 .json 文件中添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"enablePullDownRefresh": true,</span><br><span class="line">"backgroundTextStyle": "dark"</span><br></pre></td></tr></table></figure><h4 id="12-分享、客服等功能的调起需要-Button-里-设置不同-opent-type"><a href="#12-分享、客服等功能的调起需要-Button-里-设置不同-opent-type" class="headerlink" title="12. 分享、客服等功能的调起需要 Button 里 设置不同 opent-type"></a>12. 分享、客服等功能的调起需要 Button 里 设置不同 opent-type</h4><p><img src="/2018/06/17/miniprogram-note/btn_open_type.jpg" width="80%" height="70%"></p><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;item.group.overplus_amount != 0&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">'oreder-status'</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">'share'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-goodsid</span>=<span class="string">"&#123;&#123;item.product.id&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-groupid</span>=<span class="string">"&#123;&#123;item.group.id&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-shareimg</span>=<span class="string">"&#123;&#123;item.product.share_image&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-sharetitle</span>=<span class="string">"&#123;&#123;item.product.share_title&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-overplus</span>=<span class="string">"&#123;&#123;item.group.overplus_amount&#125;&#125;"</span>&gt;</span>邀好友</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>open-type 设为 share 分享，data-xxx 是传递数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res);</span><br><span class="line">   <span class="keyword">if</span> (res.from === <span class="string">'button'</span>) &#123;  <span class="comment">// 判断按钮还是右上角的转发</span></span><br><span class="line">     <span class="keyword">let</span> groupId = res.target.dataset.groupid;</span><br><span class="line">     <span class="keyword">let</span> goodsId = res.target.dataset.goodsid;</span><br><span class="line">     <span class="keyword">let</span> shareUid = <span class="keyword">this</span>.data.userSpecialInfo.user.uid;</span><br><span class="line">     <span class="keyword">let</span> shareImg = res.target.dataset.shareimg;</span><br><span class="line">     <span class="keyword">let</span> shareTitle = res.target.dataset.sharetitle;</span><br><span class="line">     <span class="keyword">let</span> overplusAmount = res.target.dataset.overplus;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       title: (utils.getSharePreTitle(overplusAmount, <span class="keyword">this</span>.data.userInfo) + shareTitle) || <span class="string">'一起来拼团，共享周边好风光'</span>,</span><br><span class="line">       imageUrl: shareImg,</span><br><span class="line">       path: <span class="string">'/pages/details/details?goodsid='</span> + goodsId + <span class="string">'&amp;shareUid='</span> + shareUid + <span class="string">'&amp;groupid='</span> + groupId</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="13-小程序通过层级改变上一层的数据"><a href="#13-小程序通过层级改变上一层的数据" class="headerlink" title="13. 小程序通过层级改变上一层的数据"></a>13. 小程序通过层级改变上一层的数据</h4><p>在 Android 开发中，我们能通过 onActivityResult 和 setResult 方法解决页面带参数返回上一页的问题。但是，在小程序了，没有提供相应的方法，我们则需要通过小程序的层级数据来改变上一层的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pages = getCurrentPages();<span class="comment">//当前页面</span></span><br><span class="line"><span class="keyword">let</span> prevPage = pages[pages.length - <span class="number">2</span>];<span class="comment">//上一页面</span></span><br><span class="line">prevPage.data.loginComeBack = <span class="literal">true</span>;  <span class="comment">// 改变上页中 loginComBack 的值</span></span><br><span class="line">wx.navigateBack(&#123;&#125;) 返回上一页</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一页的 data</span></span><br><span class="line">data: &#123;</span><br><span class="line">  loginComBack: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-selectComponent-获取的不是标签的名称，而是-class-的名称"><a href="#14-selectComponent-获取的不是标签的名称，而是-class-的名称" class="headerlink" title="14. selectComponent 获取的不是标签的名称，而是 class 的名称"></a>14. selectComponent 获取的不是标签的名称，而是 class 的名称</h4><p>在 .wxml 中, 定义了 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">wxc-dialog</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"wxc-dialog"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"灵魂用于歌唱，好物用于分享"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">""</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">confirm-text</span>=<span class="string">"分享给好友"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">image</span>=<span class="string">"/images/img_pay_share.png"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">bind:confirm</span>=<span class="string">"onConfirm"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">bind:cancel</span>=<span class="string">"onCancel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">closeUrl</span>=<span class="string">"/images/icon_close.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">openStyle</span>=<span class="string">"share"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wxc-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 .js 中获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">showShareDialog: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dialogComponent = <span class="keyword">this</span>.selectComponent(<span class="string">'.wxc-dialog'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(dialogComponent);</span><br><span class="line">    dialogComponent &amp;&amp; dialogComponent.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-背景渐变配置样式"><a href="#15-背景渐变配置样式" class="headerlink" title="15.背景渐变配置样式"></a>15.背景渐变配置样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">-90deg</span>, <span class="selector-id">#FF3537</span> 0%,  <span class="selector-id">#FE6493</span> 100%);</span><br></pre></td></tr></table></figure><h4 id="16-允许文本复制"><a href="#16-允许文本复制" class="headerlink" title="16. 允许文本复制"></a>16. 允许文本复制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">’true’</span> &gt;</span>复制文本<span class="tag">&lt; <span class="attr">text</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="17-判断空对象"><a href="#17-判断空对象" class="headerlink" title="17. 判断空对象"></a>17. 判断空对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data.userSpecialInfo).length === <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="18-发送消息模板需要经-formid-提交给后台"><a href="#18-发送消息模板需要经-formid-提交给后台" class="headerlink" title="18. 发送消息模板需要经 formid 提交给后台"></a>18. 发送消息模板需要经 formid 提交给后台</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/notice.html#%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF" target="_blank" rel="noopener">官方链接发送消息</a><br>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">'make-deals'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">report-submit</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">bindsubmit</span>=<span class="string">"formSubmit"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bindreset</span>=<span class="string">"formReset"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">'btn-make-deals'</span>&gt;</span>确认下单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">formSubmit: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'form发生了submit事件，携带数据为：'</span>, e.detail.formId);</span><br><span class="line">    <span class="keyword">this</span>.makeDeals(e.detail.formId);</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">formReset: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'form发生了reset事件'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19-跳转用-navigator-组件"><a href="#19-跳转用-navigator-组件" class="headerlink" title="19. 跳转用 navigator 组件"></a>19. 跳转用 navigator 组件</h4><p>设置跳转的方所 type<br>     跳转的的路径 url<br>     如果是带参数跳转 例如 /pages/search?cateCode=111&amp;title=”标题”<br>     中/pages/search 是要跳转的页面，cateCode 是参数key，111 是参数的 value<br>    官方例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn-area"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">"/page/navigate/navigate?title=navigate"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">hover-class</span>=<span class="string">"navigator-hover"</span>&gt;</span>跳转到新页面</span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">"../../redirect/redirect/redirect?title=redirect"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">"redirect"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">hover-class</span>=<span class="string">"other-navigator-hover"</span>&gt;</span>在当前页打开</span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">"/page/index/index"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">"switchTab"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">hover-class</span>=<span class="string">"other-navigator-hover"</span>&gt;</span>切换 Tab</span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">target</span>=<span class="string">"miniProgram"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">"navigate"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">app-id</span>=<span class="string">""</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">path</span>=<span class="string">""</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">extra-data</span>=<span class="string">""</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"release"</span>&gt;</span>打开绑定的小程序</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="20-页面自动滚动到底部"><a href="#20-页面自动滚动到底部" class="headerlink" title="20. 页面自动滚动到底部"></a>20. 页面自动滚动到底部</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'root'</span> <span class="attr">id</span>=<span class="string">'root-id'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">'scroll-view'</span> <span class="attr">scroll-top</span>=<span class="string">"&#123;&#123;scrollTop&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.createSelectorQuery().select(<span class="string">'#root-id'</span>).boundingClientRect(<span class="function"><span class="keyword">function</span> (<span class="params">rect</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使页面滚动到底部  </span></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">"pageScrollToBottom"</span>, rect );</span><br><span class="line">  wx.pageScrollTo(&#123;</span><br><span class="line">    scrollTop: rect.bottom</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).exec();</span><br></pre></td></tr></table></figure><p>root-id 是 page 页面的 id<br>scroll-top 可以滚动到指定位置，这里是底部</p><h4 id="21-小程序常用的开源-UI-控件"><a href="#21-小程序常用的开源-UI-控件" class="headerlink" title="21. 小程序常用的开源 UI 控件"></a>21. 小程序常用的开源 UI 控件</h4><p>. WeUI 同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信 Web <a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">https://github.com/Tencent/weui-wxss</a><br>.MinUI 第三方基于规范的小程序组件库，简洁、易用、工具化,并支持wepy和组件化方案等<br><a href="https://meili.github.io/min/index.html" target="_blank" rel="noopener">https://meili.github.io/min/index.html</a><br>.ZanUI 第三方的一个颜值高、好用、易扩展的微信小程序 UI 库<br><a href="https://github.com/youzan/zanui-weapp" target="_blank" rel="noopener">https://github.com/youzan/zanui-weapp</a></p><h4 id="22-待续···"><a href="#22-待续···" class="headerlink" title="22. 待续···"></a>22. 待续···</h4><p>如果以后还有一些点，会更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近因公司项目需要，我去做了一个小程序，这中间踩了很多坑，现在有时间整理了一下，一些常用到的点和踩过的坑。&lt;br&gt;个人对 js 不太熟，也是第一次做小程序，有不对的地方，欢迎指出。&lt;/p&gt;
&lt;h4 id=&quot;1-小程序的构成&quot;&gt;&lt;a href=&quot;#1-小程序的构成&quot; clas
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://yxhuangch.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ListView 源码分析</title>
    <link href="https://yxhuangch.github.io/2018/03/03/ListView-source-code-note/"/>
    <id>https://yxhuangch.github.io/2018/03/03/ListView-source-code-note/</id>
    <published>2018-03-03T06:18:20.000Z</published>
    <updated>2018-03-10T09:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>ListView 作为 Android 开发中最常用的组件之一，最近刚好有时间，看了源码，记录一下。</p><p>ListView 的继承结构<br><img src="/2018/03/03/ListView-source-code-note/listview.jpg" width="70%" height="50%"></p><h3 id="一-需要解决的问题"><a href="#一-需要解决的问题" class="headerlink" title="一. 需要解决的问题"></a>一. 需要解决的问题</h3><p>. ListView 本质上也是一个 ViewGroup， 它的 onMeasure(), onLayout() 过程， onDraw() 过程？</p><p>. 它是如何配合 Adaper 实现数据的展示的？</p><p>. ListView 是如何构造 ItemView 的循环使用，而不会造成 OOM 的？</p><h3 id="二-重要的类"><a href="#二-重要的类" class="headerlink" title="二. 重要的类"></a>二. 重要的类</h3><h4 id="1-RecycleBin"><a href="#1-RecycleBin" class="headerlink" title="1. RecycleBin"></a>1. RecycleBin</h4><p>RecycleBin 是分析 ListView 重要的类，它是 AbsListView 的一个内部类，它的几个方法，承担着 ListView 对 ItemView 循环使用的功能。</p><p>主要的成员变量：<br>. View[] mActiveViews;  以数据的形式存储在屏幕上展示的 View.<br>. ArrayList<view>[] mScropViews;  无序的存储回收的 View.</view></p><p>主要的方法：<br>. 填充 ActiveView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">fillActiveViews</span><span class="params">(<span class="keyword">int</span> childCount, <span class="keyword">int</span> firstActivePosition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mActiveViews.length &lt; childCount) &#123;</span><br><span class="line">        mActiveViews = <span class="keyword">new</span> View[childCount];</span><br><span class="line">    &#125;</span><br><span class="line">    mFirstActivePosition = firstActivePosition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//noinspection MismatchedReadAndWriteOfArray</span></span><br><span class="line">    <span class="keyword">final</span> View[] activeViews = mActiveViews;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        View child = getChildAt(i);</span><br><span class="line">        AbsListView.LayoutParams lp = (AbsListView.LayoutParams) child.getLayoutParams();</span><br><span class="line">        <span class="comment">// Don't put header or footer views into the scrap heap</span></span><br><span class="line">        <span class="keyword">if</span> (lp != <span class="keyword">null</span> &amp;&amp; lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</span><br><span class="line">            <span class="comment">// Note:  We do place AdapterView.ITEM_VIEW_TYPE_IGNORE in active views.</span></span><br><span class="line">            <span class="comment">//        However, we will NOT place them into scrap views.</span></span><br><span class="line">            activeViews[i] = child;</span><br><span class="line">            <span class="comment">// Remember the position so that setupChild() doesn't reset state.</span></span><br><span class="line">            lp.scrappedFromPosition = firstActivePosition + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>. 根据指定的位置，从 mActiveViews 中获取相应的 View。 如果找到了，返回，并同时从 mActiveViews 中移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">getActiveView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = position - mFirstActivePosition;</span><br><span class="line">    <span class="keyword">final</span> View[] activeViews = mActiveViews;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;=<span class="number">0</span> &amp;&amp; index &lt; activeViews.length) &#123;</span><br><span class="line">        <span class="keyword">final</span> View match = activeViews[index];</span><br><span class="line">        activeViews[index] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> match;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.根据指定的位置，从 mScrapViews 中获取相应的 scropView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">getScrapView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> whichScrap = mAdapter.getItemViewType(position);</span><br><span class="line">    <span class="keyword">if</span> (whichScrap &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mViewTypeCount == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> retrieveFromScrap(mCurrentScrap, position);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (whichScrap &lt; mScrapViews.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> retrieveFromScrap(mScrapViews[whichScrap], position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>. 把 View 放入回收的 mScrapViews 中缓存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addScrapView</span><span class="params">(View scrap, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">if</span> (mViewTypeCount == <span class="number">1</span>) &#123;</span><br><span class="line">            mCurrentScrap.add(scrap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mScrapViews[viewType].add(scrap);</span><br><span class="line">        &#125;</span><br><span class="line">        ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-HeaderViewListAdapter"><a href="#2-HeaderViewListAdapter" class="headerlink" title="2. HeaderViewListAdapter"></a>2. HeaderViewListAdapter</h4><p> 有 header view 时，进行包装的 ListAdapter.</p><h4 id="3-DataSetObservable"><a href="#3-DataSetObservable" class="headerlink" title="3. DataSetObservable"></a>3. DataSetObservable</h4><p>通知数据产生了变化，（这里使用了观察者模式，待分析）</p><h3 id="三-OnLayout-过程"><a href="#三-OnLayout-过程" class="headerlink" title="三. OnLayout 过程"></a>三. OnLayout 过程</h3><p>是 AbsListView#onLayout(…) 方法<br>调用 layoutChildren()， 抽象方法，由子类实现</p><p>ListView#layoutChildren()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">ListView#layoutChildren() &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> dataChanged = mDataChanged;</span><br><span class="line">    <span class="keyword">if</span> (dataChanged) &#123;</span><br><span class="line">        handleDataChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Pull all children into the RecycleBin.</span></span><br><span class="line">    <span class="comment">// These views will be reused if possible</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> firstPosition = mFirstPosition;</span><br><span class="line">    <span class="keyword">final</span> RecycleBin recycleBin = mRecycler;</span><br><span class="line">    <span class="keyword">if</span> (dataChanged) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            recycleBin.addScrapView(getChildAt(i), firstPosition+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        recycleBin.fillActiveViews(childCount, firstPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear out old views</span></span><br><span class="line">    detachAllViewsFromParent();</span><br><span class="line">    recycleBin.removeSkippedScrap();</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">switch</span> (mLayoutMode) &#123;</span><br><span class="line">...</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mStackFromBottom) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">                setSelectedPositionInt(position);</span><br><span class="line">                sel = fillFromTop(childrenTop);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(mItemCount - <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">                setSelectedPositionInt(position);</span><br><span class="line">                sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSelectedPosition &gt;= <span class="number">0</span> &amp;&amp; mSelectedPosition &lt; mItemCount) &#123;</span><br><span class="line">                sel = fillSpecific(mSelectedPosition,</span><br><span class="line">                        oldSel == <span class="keyword">null</span> ? childrenTop : oldSel.getTop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFirstPosition &lt; mItemCount) &#123;</span><br><span class="line">                sel = fillSpecific(mFirstPosition,</span><br><span class="line">                        oldFirst == <span class="keyword">null</span> ? childrenTop : oldFirst.getTop());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sel = fillSpecific(<span class="number">0</span>, childrenTop);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush any cached views that did not get reused above</span></span><br><span class="line">    recycleBin.scrapActiveViews();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dataChanged 由 mDataChanged 赋值。mDataChanged 是 AdapterView 的成员变量，初始值是 false, 在 Adapter#notifyDataSetChanged() 是才会变成 true, 这个在后面有介绍。当第一次 Layout 的时候时，ListView 还没有 ChildView, 所以 childCount 是 0.</p><p>由于 childCount 为 0， recycleBin.fillActiveViews 里面不起作用，跳出循环了。</p><p>mStackFromBottom 是否从底部开始填充。 fillFromTop 是从 ListView 的顶部开始填充，fillUp 是从 ListView 的底部开始填充。<br>它们只是方向不同而已。</p><p>fillFromTop 又会调动 fillDown()， fillDown 方法里面会循环，直到所有 child 的高度高于平面的高度，说明已经填满屏幕了，则跳出循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> View <span class="title">fillDown</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> nextTop)</span> </span>&#123;</span><br><span class="line">    View selectedView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> end = (mBottom - mTop);</span><br><span class="line">    <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</span><br><span class="line">        end -= mListPadding.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环，直到所有 Child 的高度超过平面的高度</span></span><br><span class="line">    <span class="keyword">while</span> (nextTop &lt; end &amp;&amp; pos &lt; mItemCount) &#123;</span><br><span class="line">        <span class="comment">// is this the selected item?</span></span><br><span class="line">        <span class="keyword">boolean</span> selected = pos == mSelectedPosition;</span><br><span class="line">        View child = makeAndAddView(pos, nextTop, <span class="keyword">true</span>, mListPadding.left, selected);</span><br><span class="line"></span><br><span class="line">        nextTop = child.getBottom() + mDividerHeight;</span><br><span class="line">        <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">            selectedView = child;</span><br><span class="line">        &#125;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setVisibleRangeHint(mFirstPosition, mFirstPosition + getChildCount() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> selectedView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makaAndAaddView 获取 View, 并将它存放入 child 的 list 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the view and adds it to our list of children. The view can be</span></span><br><span class="line"><span class="comment"> * made fresh, converted from an unused view, or used as is if it was in</span></span><br><span class="line"><span class="comment"> * the recycle bin.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the view that was added</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">makeAndAddView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> selected)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mDataChanged) &#123;</span><br><span class="line">        <span class="comment">// Try to use an existing view for this position.</span></span><br><span class="line">        <span class="keyword">final</span> View activeView = mRecycler.getActiveView(position);</span><br><span class="line">        <span class="keyword">if</span> (activeView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Found it. We're reusing an existing child, so it just needs</span></span><br><span class="line">            <span class="comment">// to be positioned like a scrap view.</span></span><br><span class="line">            setupChild(activeView, position, y, flow, childrenLeft, selected, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> activeView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make a new view for this position, or convert an unused view if</span></span><br><span class="line">    <span class="comment">// possible.</span></span><br><span class="line">    <span class="keyword">final</span> View child = obtainView(position, mIsScrap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This needs to be positioned and measured.</span></span><br><span class="line">    setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当第一次 layout 时， mRecycler.getActiveView 返回的是空的。<br>最终会是调用 obtainView 方法。obtainView 方法是在 ListView 的父类 AbsListView 的方法</p><p>AbsListView#obtainView(…)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets a view and have it show the data associated with the specified</span></span><br><span class="line"><span class="comment"> * position. This is called when we have already discovered that the view</span></span><br><span class="line"><span class="comment"> * is not available for reuse in the recycle bin. The only choices left are</span></span><br><span class="line"><span class="comment"> * converting an old view or making a new one.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> A view displaying the data associated with the specified position</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">View <span class="title">obtainView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span>[] outMetadata)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">final</span> View scrapView = mRecycler.getScrapView(position);</span><br><span class="line">    <span class="comment">// 重点 调用 Adatper#getView(...) 方法</span></span><br><span class="line">    <span class="keyword">final</span> View child = mAdapter.getView(position, scrapView, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (scrapView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child != scrapView) &#123;</span><br><span class="line">            mRecycler.addScrapView(scrapView, position);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    setItemViewLayoutParams(child, position);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会调用从 RecyclerBin#getScrapView(…) 尝试从缓存中取出废弃的 View, 但是第一次 layout 的时候，返回来是空的。</p><p>重点是 Adapter.getView(…) 方法，当我们继承 BaseAdapter 的时候，要重写它的 getView 方法。<br>下面我们看看例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line">        convertView = LayoutInflater.from(mContext).inflate(R.layout.attention_item_view_layout, parent, <span class="keyword">false</span>);</span><br><span class="line">        mViewHolder = <span class="keyword">new</span> AttentionViewHolder(convertView);</span><br><span class="line">        convertView.setTag(mViewHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mViewHolder = (AttentionViewHolder) convertView.getTag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 converView 就是从缓存中取出的 scrapView， 当 scrapView 是空的时候，所以我们要创建一个 View。<br>另外参数 ViewGroup parent，   其实就是 ListView.</p><p>我们回到 makeAndAddView 方法中, 在 obtainView 中获取 child, 然后调用 setupChild 方法，将 child 添加进 ListView 中。</p><p>ListView#setupChild(…)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupChild</span><span class="params">(View child, <span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flowDown, <span class="keyword">int</span> childrenLeft,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> selected, <span class="keyword">boolean</span> isAttachedToWindow)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = (AbsListView.LayoutParams) generateDefaultLayoutParams();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((isAttachedToWindow &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter</span><br><span class="line">            &amp;&amp; p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123;</span><br><span class="line">        attachViewToParent(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p);</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        addViewInLayout(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p, <span class="keyword">true</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到最终是通过 attachViewToParent 或者 addViewInLayout 方法，将 child 添加进 ListView 中。</p><p>当第二次 layout 的时候，就是调用 RecyclerBin 的一些方法时有一些改变，但是整个流程的变化不大。</p><h3 id="四-draw-绘制过程"><a href="#四-draw-绘制过程" class="headerlink" title="四. draw 绘制过程"></a>四. draw 绘制过程</h3><p>ListView 的绘制在 ListView#dispatchDraw(…) 中。这个方法比较简单，就是绘制分割线和分发 childView 自己的绘制而已。</p><h3 id="五-滑动的过程"><a href="#五-滑动的过程" class="headerlink" title="五. 滑动的过程"></a>五. 滑动的过程</h3><p>滑动开始是 AbsListView#onTouchEvent(…) 然后会调用 AbsListView#onTouchMove()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTouchMove</span><span class="params">(MotionEvent ev, MotionEvent vtev)</span> </span>&#123;</span><br><span class="line">        ...    </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) ev.getY(pointerIndex);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">switch</span> (mTouchMode) &#123;</span><br><span class="line">            ...    </span><br><span class="line">            <span class="keyword">case</span> TOUCH_MODE_SCROLL:</span><br><span class="line">            <span class="keyword">case</span> TOUCH_MODE_OVERSCROLL:</span><br><span class="line">                scrollIfNeeded((<span class="keyword">int</span>) ev.getX(pointerIndex), y, vtev);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AbsListView#scrollIfNeeded(…)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollIfNeeded</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, MotionEvent vtev)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> deltaY = rawDeltaY;</span><br><span class="line">       <span class="keyword">int</span> incrementalDeltaY =</span><br><span class="line">               mLastY != Integer.MIN_VALUE ? y - mLastY + scrollConsumedCorrection : deltaY;</span><br><span class="line">       <span class="keyword">int</span> lastYCorrection = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mTouchMode == TOUCH_MODE_SCROLL) &#123;</span><br><span class="line">           ...</span><br><span class="line">           <span class="keyword">if</span> (y != mLastY) &#123;</span><br><span class="line">            ...</span><br><span class="line">               <span class="keyword">boolean</span> atEdge = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">if</span> (incrementalDeltaY != <span class="number">0</span>) &#123;</span><br><span class="line">                   atEdge = trackMotionScroll(deltaY, incrementalDeltaY);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mTouchMode == TOUCH_MODE_OVERSCROLL) &#123;</span><br><span class="line">           <span class="keyword">if</span> (y != mLastY) &#123;</span><br><span class="line">               ...                 </span><br><span class="line">               <span class="keyword">if</span> (incrementalDeltaY != <span class="number">0</span>) &#123;</span><br><span class="line">                  ...</span><br><span class="line">                  trackMotionScroll(incrementalDeltaY, incrementalDeltaY);</span><br><span class="line">                  ...</span><br><span class="line">             &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>scrllIfNeeded(…) 方法又会调用 trackMotionScroll 方法</p><p>AbsListView#trackMotionScroll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">trackMotionScroll</span><span class="params">(<span class="keyword">int</span> deltaY, <span class="keyword">int</span> incrementalDeltaY)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">        <span class="keyword">if</span> (down) &#123;</span><br><span class="line">            <span class="keyword">int</span> top = -incrementalDeltaY;</span><br><span class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</span><br><span class="line">                top += listPadding.top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (child.getBottom() &gt;= top) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">int</span> position = firstPosition + i;</span><br><span class="line">                    <span class="keyword">if</span> (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123;</span><br><span class="line">                        <span class="comment">// The view will be rebound to new data, clear any</span></span><br><span class="line">                        <span class="comment">// system-managed transient state.</span></span><br><span class="line">                        child.clearAccessibilityFocus();</span><br><span class="line">                        mRecycler.addScrapView(child, position);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> bottom = getHeight() - incrementalDeltaY;</span><br><span class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</span><br><span class="line">                bottom -= listPadding.bottom;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (child.getTop() &lt;= bottom) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start = i;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">int</span> position = firstPosition + i;</span><br><span class="line">                    <span class="keyword">if</span> (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123;</span><br><span class="line">                        <span class="comment">// The view will be rebound to new data, clear any</span></span><br><span class="line">                        <span class="comment">// system-managed transient state.</span></span><br><span class="line">                        child.clearAccessibilityFocus();</span><br><span class="line">                        mRecycler.addScrapView(child, position);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            detachViewsFromParent(start, count);</span><br><span class="line">            mRecycler.removeSkippedScrap();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absIncrementalDeltaY = Math.abs(incrementalDeltaY);</span><br><span class="line">        <span class="keyword">if</span> (spaceAbove &lt; absIncrementalDeltaY || spaceBelow &lt; absIncrementalDeltaY) &#123;</span><br><span class="line">            fillGap(down);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRecycler.fullyDetachScrapViews();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 trackMotionScroll 方法里面，前段，我们看到，无论是向上滑，还是向下滑，只要超出屏幕外，就会调用 RecyclerBin#addScrapView(…),进行回收。同时也会调用 fillGap 进行填充。</p><p>fillGap 是抽象方法，由子类实现<br>ListView#fillGap(…)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillGap</span><span class="params">(<span class="keyword">boolean</span> down)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = getChildCount();</span><br><span class="line">      <span class="keyword">if</span> (down) &#123;</span><br><span class="line">          ...</span><br><span class="line">          fillDown(mFirstPosition + count, startOffset);</span><br><span class="line">          ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">          fillUp(mFirstPosition - <span class="number">1</span>, startOffset);</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 fillGrap 里面调用了 fillDown 或者 fillUp， 对 ListView 填充 childView, 这样滑动的时候，形成循环，回到前面的分析。</p><h3 id="六-数据变化"><a href="#六-数据变化" class="headerlink" title="六. 数据变化"></a>六. 数据变化</h3><p>当数据变化的时候，我们会调用 BaseAdapter#notifyDataSetChanged(), 让 ListView 的布局也跟着更新。<br>Adapter 更新数据是个典型的观察者模式。</p><p><img src="/2018/03/03/ListView-source-code-note/notify.png" width="70%" height="50%"></p><p>那我们看看 Adapter 中的观察者模式<br><img src="/2018/03/03/ListView-source-code-note/adapter_notify.png" width="100%" height="100%"></p><p>从上图我们可以知道 DataSetObserver 是抽象的观察者，AdapterView$AdapterDataSetObserver 是具体的观察者。Observale<t> 是抽象的被观察者，DataSetObservable 是具体的被观察者。</t></p><p>当我们调用 BaseAdapter#notifyDataSetChanged()时，就会调动 DataSetObservable#notifyChanged(), 在这个方面里面通过 for 循环通知所有的观察者，最终调动 AdapterView$AdapterDataSetObserver#onChanged() 方法。<br>在 AdapterView$AdapterDataSetObserver#onChanged() 方法中，会调动 reuestLayout 要求重新布局。布局的过程见上面的分析。</p><h3 id="七-参考资料"><a href="#七-参考资料" class="headerlink" title="七. 参考资料"></a>七. 参考资料</h3><ol><li>Android ListView工作原理完全解析，带你从源码的角度彻底理解<a href="">http://blog.csdn.net/guolin_blog/article/details/44996879</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ListView 作为 Android 开发中最常用的组件之一，最近刚好有时间，看了源码，记录一下。&lt;/p&gt;
&lt;p&gt;ListView 的继承结构&lt;br&gt;&lt;img src=&quot;/2018/03/03/ListView-source-code-note/listview.jpg&quot;
      
    
    </summary>
    
    
      <category term="Android 源码分析" scheme="https://yxhuangch.github.io/tags/Android-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager 源码简要分析</title>
    <link href="https://yxhuangch.github.io/2018/02/25/viewpager-source-code-note/"/>
    <id>https://yxhuangch.github.io/2018/02/25/viewpager-source-code-note/</id>
    <published>2018-02-25T06:51:15.000Z</published>
    <updated>2018-03-21T23:56:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>ViewPager 在 Android 开发中是最常用的控件之一，最近刚好有时间，于是看了一下它的源码，顺便做个笔记记录一下。</p><p>看源码，我们一般会带着问题去看，这样效果可能会更好一些。看 ViewPager 源码，我主要是想弄清一下的几个问题。</p><p>–</p><h3 id="1-疑问"><a href="#1-疑问" class="headerlink" title="1.疑问"></a>1.疑问</h3><ul><li>ViewPager 是直接继承 ViewGroup 的，继承 ViewGroup 的自定义控件要在 onMeasure() 和 onLayout() 方法中对 childView 进行处理的，ViewPager 是如何做的？</li><li>ViewPager 是如何计算滑动的距离，并滑动到相应的位置？</li><li>ViewPager 是如何处理点击事件的拦截，并处理相应的事件冲突的？</li><li>ViewPager#setOffscreenPageLimit(int limit) 是如何实现界面缓存数量的限制的？</li></ul><p>-</p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h3><p>入口 setAdapter –&gt; onMeasure / populate –&gt; onLayout</p><h4 id="1-对-setAdapter-…-的分析"><a href="#1-对-setAdapter-…-的分析" class="headerlink" title="1. 对 setAdapter(…) 的分析"></a>1. 对 setAdapter(…) 的分析</h4><p>ViewPager#setAdapter(PagerAdapter adapter) 是对 ViewPager 分析的入口，这个方法里面的代码比较简单，我们只需要知道如果是第一次布局，它会调用 requestLayout() 对 ViewPager 重新进行布局。</p><h4 id="2-对-onMeasure-…-的分析"><a href="#2-对-onMeasure-…-的分析" class="headerlink" title="2. 对 onMeasure(…) 的分析"></a>2. 对 onMeasure(…) 的分析</h4><p>先看分析代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 1.存储 ViewPager 自身的测量宽高</span></span><br><span class="line">       setMeasuredDimension(getDefaultSize(<span class="number">0</span>, widthMeasureSpec),</span><br><span class="line">               getDefaultSize(<span class="number">0</span>, heightMeasureSpec));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> measuredWidth = getMeasuredWidth();</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> maxGutterSize = measuredWidth / <span class="number">10</span>;   </span><br><span class="line">       mGutterSize = Math.min(maxGutterSize, mDefaultGutterSize);  <span class="comment">// 间隔（槽）的尺寸？？？</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// Children are just made to fill our space.</span></span><br><span class="line">       <span class="comment">// ChildView 的宽高， 要减去两边 padding 的距离</span></span><br><span class="line">       <span class="keyword">int</span> childWidthSize = measuredWidth - getPaddingLeft() - getPaddingRight();</span><br><span class="line">       <span class="keyword">int</span> childHeightSize = getMeasuredHeight() - getPaddingTop() - getPaddingBottom();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ChildView 是 decorview 的时候，一般涉及不到 可忽略</span></span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取在 MeasureSpec.EXACTLY 去条件下，childview 的 MeasureSpec</span></span><br><span class="line">       mChildWidthMeasureSpec = MeasureSpec.makeMeasureSpec(childWidthSize, MeasureSpec.EXACTLY);</span><br><span class="line">       mChildHeightMeasureSpec = MeasureSpec.makeMeasureSpec(childHeightSize, MeasureSpec.EXACTLY);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Make sure we have created all fragments that we need to have shown.</span></span><br><span class="line">       mInLayout = <span class="keyword">true</span>;</span><br><span class="line">       populate();   <span class="comment">// 2. 这个方法很重要</span></span><br><span class="line">       mInLayout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Page views next.   </span></span><br><span class="line">       <span class="comment">// 3. 对 childView 的 measure </span></span><br><span class="line">       size = getChildCount();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">           <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">           <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line"></span><br><span class="line">               ....</span><br><span class="line"></span><br><span class="line">               <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">               <span class="keyword">if</span> (lp == <span class="keyword">null</span> || !lp.isDecor) &#123;   <span class="comment">// ChildView 不是 DecorView</span></span><br><span class="line">                   <span class="comment">// 获取 ChildView 的 widthSpec</span></span><br><span class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> widthSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                           (<span class="keyword">int</span>) (childWidthSize * lp.widthFactor), MeasureSpec.EXACTLY);</span><br><span class="line">                   <span class="comment">// childView 自身的测量</span></span><br><span class="line">                   child.measure(widthSpec, mChildHeightMeasureSpec);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>具体的分析在上面的源码已经加了注释，主要是：<br>. 存储 ViewPager 自身测量的宽高.<br>. 调用 populate() 方法，稍后分析.<br>. 对 childView 进行测量，这是继承 ViewGroup 自定义 View 都要做的.</p><h4 id="3-对-papulate-…-分析"><a href="#3-对-papulate-…-分析" class="headerlink" title="3. 对 papulate(…) 分析"></a>3. 对 papulate(…) 分析</h4><p>注释的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate</span><span class="params">(<span class="keyword">int</span> newCurrentItem)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mOffscreenPageLimit 默认是 1</span></span><br><span class="line">        <span class="comment">// 设置页数限制，［startPos, endPos］=&gt;［mCurItem - pageLimit, mCurItem + pageLimit] （很好的越界判断方法，可以借用）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> pageLimit = mOffscreenPageLimit;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> startPos = Math.max(<span class="number">0</span>, mCurItem - pageLimit);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mAdapter.getCount();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> endPos = Math.min(N - <span class="number">1</span>, mCurItem + pageLimit);</span><br><span class="line"></span><br><span class="line">        ... </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Locate the currently focused item or add it if needed.</span></span><br><span class="line">        <span class="keyword">int</span> curIndex = -<span class="number">1</span>;</span><br><span class="line">        ItemInfo curItem = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (curIndex = <span class="number">0</span>; curIndex &lt; mItems.size(); curIndex++) &#123;</span><br><span class="line">            <span class="keyword">final</span> ItemInfo ii = mItems.get(curIndex);</span><br><span class="line">            <span class="keyword">if</span> (ii.position &gt;= mCurItem) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ii.position == mCurItem) curItem = ii;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;                                           <span class="comment">// 这两段写法可以借鉴，先从 List 中取，如果取到的结果为空，</span></span><br><span class="line">           <span class="comment">//  则生成一个并存放到 List 中，并返回。这样下次取的时候就可以用了</span></span><br><span class="line">           <span class="comment">// 这样避免了一次生成多个对象，减少了申请内存空间的分配，减少内存抖动。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curItem == <span class="keyword">null</span> &amp;&amp; N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            curItem = addNewItem(mCurItem, curIndex);  <span class="comment">// 里面会调用 Adapter.instantiateItem(ViewGroup container, int position)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fill 3x the available width or up to the number of offscreen</span></span><br><span class="line">        <span class="comment">// pages requested to either side, whichever is larger.</span></span><br><span class="line">        <span class="comment">// If we have no current item we have no work to do.</span></span><br><span class="line">        <span class="keyword">if</span> (curItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 左边的 ChildView</span></span><br><span class="line">            <span class="keyword">float</span> extraWidthLeft = <span class="number">0</span>.f;</span><br><span class="line">            <span class="keyword">int</span> itemIndex = curIndex - <span class="number">1</span>;</span><br><span class="line">            ItemInfo ii = itemIndex &gt;= <span class="number">0</span> ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> clientWidth = getClientWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> leftWidthNeeded = clientWidth &lt;= <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">                    <span class="number">2</span>.f - curItem.widthFactor + (<span class="keyword">float</span>) getPaddingLeft() / (<span class="keyword">float</span>) clientWidth;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> pos = mCurItem - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; pos--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (extraWidthLeft &gt;= leftWidthNeeded &amp;&amp; pos &lt; startPos) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ii == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (pos == ii.position &amp;&amp; !ii.scrolling) &#123;</span><br><span class="line">                        mItems.remove(itemIndex);</span><br><span class="line">                        mAdapter.destroyItem(<span class="keyword">this</span>, pos, ii.object);  <span class="comment">// 销毁 View</span></span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                            Log.i(TAG, <span class="string">"populate() - destroyItem() with pos: "</span> + pos</span><br><span class="line">                                    + <span class="string">" view: "</span> + ((View) ii.object));</span><br><span class="line">                        &#125;</span><br><span class="line">                        itemIndex--;</span><br><span class="line">                        curIndex--;</span><br><span class="line">                        ii = itemIndex &gt;= <span class="number">0</span> ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ii != <span class="keyword">null</span> &amp;&amp; pos == ii.position) &#123;</span><br><span class="line">                    extraWidthLeft += ii.widthFactor;</span><br><span class="line">                    itemIndex--;</span><br><span class="line">                    ii = itemIndex &gt;= <span class="number">0</span> ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ii = addNewItem(pos, itemIndex + <span class="number">1</span>);</span><br><span class="line">                    extraWidthLeft += ii.widthFactor;</span><br><span class="line">                    curIndex++;</span><br><span class="line">                    ii = itemIndex &gt;= <span class="number">0</span> ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 右边的 ChildView</span></span><br><span class="line">            <span class="keyword">float</span> extraWidthRight = curItem.widthFactor;</span><br><span class="line">            itemIndex = curIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (extraWidthRight &lt; <span class="number">2</span>.f) &#123;</span><br><span class="line">                ii = itemIndex &lt; mItems.size() ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> rightWidthNeeded = clientWidth &lt;= <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">                        (<span class="keyword">float</span>) getPaddingRight() / (<span class="keyword">float</span>) clientWidth + <span class="number">2</span>.f;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> pos = mCurItem + <span class="number">1</span>; pos &lt; N; pos++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (extraWidthRight &gt;= rightWidthNeeded &amp;&amp; pos &gt; endPos) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ii == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (pos == ii.position &amp;&amp; !ii.scrolling) &#123;</span><br><span class="line">                            mItems.remove(itemIndex);</span><br><span class="line">                            mAdapter.destroyItem(<span class="keyword">this</span>, pos, ii.object);  <span class="comment">// 销毁 View</span></span><br><span class="line">                            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                                Log.i(TAG, <span class="string">"populate() - destroyItem() with pos: "</span> + pos</span><br><span class="line">                                        + <span class="string">" view: "</span> + ((View) ii.object));</span><br><span class="line">                            &#125;</span><br><span class="line">                            ii = itemIndex &lt; mItems.size() ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ii != <span class="keyword">null</span> &amp;&amp; pos == ii.position) &#123;</span><br><span class="line">                        extraWidthRight += ii.widthFactor;</span><br><span class="line">                        itemIndex++;</span><br><span class="line">                        ii = itemIndex &lt; mItems.size() ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ii = addNewItem(pos, itemIndex);</span><br><span class="line">                        itemIndex++;</span><br><span class="line">                        extraWidthRight += ii.widthFactor;</span><br><span class="line">                        ii = itemIndex &lt; mItems.size() ? mItems.get(itemIndex) : <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算页面的偏移量, 计算 ItemInfo.offset 的值</span></span><br><span class="line">            calculatePageOffsets(curItem, curIndex, oldCurInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        mAdapter.setPrimaryItem(<span class="keyword">this</span>, mCurItem, curItem != <span class="keyword">null</span> ? curItem.object : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        mAdapter.finishUpdate(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>populate(…) 主要做了：<br>. 设置了缓存界面数量的限制.<br>. 生成 ItemInfo, ItemInfo 是对 childView 的包装，方便 ViewPager 进行管理.<br>. 对左边和右边的 childView 进行处理.<br>. 对用 calculatePageOffsets，计算界面的偏移量，通过计算  ItemInfo.offset 的值，得出偏移量.</p><h4 id="4-对-onLayout-…-分析"><a href="#4-对-onLayout-…-分析" class="headerlink" title="4. 对 onLayout(…) 分析"></a>4. 对 onLayout(…) 分析</h4><p>onLaout(…) 中是按普通 ViewGroup 对每个 childView 进行 layout 即可</p><h4 id="5-其他重要的方法"><a href="#5-其他重要的方法" class="headerlink" title="5. 其他重要的方法"></a>5. 其他重要的方法</h4><ul><li><p>scrollToItem(…) 滑动<br>使用 Scroller 来完成滑动的</p></li><li><p>onInterceptTouchEvent() 处理事件拦截<br>只有在拖动的情况下才会进行拦截.</p></li><li><p>预加载的问题 ViewPager#setOffscreenPageLimit<br>默认是 1.<br>在 populate(…) 方法中计算 starPos 和 endPos 用到了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> pageLimit = mOffscreenPageLimit;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> startPos = Math.max(<span class="number">0</span>, mCurItem - pageLimit);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = mAdapter.getCount();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> endPos = Math.min(N - <span class="number">1</span>, mCurItem + pageLimit);</span><br></pre></td></tr></table></figure><p>形成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[startPos, currenPos, endPos]</span><br></pre></td></tr></table></figure><p>-</p><h3 id="3-其他收获"><a href="#3-其他收获" class="headerlink" title="3. 其他收获"></a>3. 其他收获</h3><p>. 下面的代码写法可以借鉴，先从 List 中取，如果取到的结果为空，则生成一个并存放到 List 中，并返回。这样下次取的时候就可以用了这样避免了一次生成多个对象，减少了申请内存空间的分配，减少内存抖动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curIndex = -<span class="number">1</span>;</span><br><span class="line">ItemInfo curItem = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (curIndex = <span class="number">0</span>; curIndex &lt; mItems.size(); curIndex++) &#123;</span><br><span class="line">    <span class="keyword">final</span> ItemInfo ii = mItems.get(curIndex);</span><br><span class="line">    <span class="keyword">if</span> (ii.position &gt;= mCurItem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ii.position == mCurItem) curItem = ii;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curItem == <span class="keyword">null</span> &amp;&amp; N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    curItem = addNewItem(mCurItem, curIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ItemInfo <span class="title">addNewItem</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    ItemInfo ii = <span class="keyword">new</span> ItemInfo();</span><br><span class="line">    ii.position = position;</span><br><span class="line">    ii.object = mAdapter.instantiateItem(<span class="keyword">this</span>, position);</span><br><span class="line">    ii.widthFactor = mAdapter.getPageWidth(position);</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= mItems.size()) &#123;</span><br><span class="line">        mItems.add(ii);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mItems.add(index, ii);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ii;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>另外 Arrays.sor() 排序使用到了 DulPivotQuickSort.sort() 快速排序算法。有时间要去研究一下。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ViewPager 在 Android 开发中是最常用的控件之一，最近刚好有时间，于是看了一下它的源码，顺便做个笔记记录一下。&lt;/p&gt;
&lt;p&gt;看源码，我们一般会带着问题去看，这样效果可能会更好一些。看 ViewPager 源码，我主要是想弄清一下的几个问题。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="android,android 源码分析" scheme="https://yxhuangch.github.io/tags/android-android-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>K-近邻算法</title>
    <link href="https://yxhuangch.github.io/2018/02/11/MachineLearing-KNN/"/>
    <id>https://yxhuangch.github.io/2018/02/11/MachineLearing-KNN/</id>
    <published>2018-02-11T06:28:50.000Z</published>
    <updated>2018-02-11T15:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="(1)定义"></a>(1)定义</h4><p>K-近邻算法采用测量不同特征值之间的距离方法进行分类。</p><h4 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="(2) 优缺点"></a>(2) 优缺点</h4><p>. 优点： 精度高、对异常值不敏感、无数据输入假定。<br>. 缺点： 计算复杂度高、空间复杂度高。<br>. 适用数据范围：数值型和标称型。</p><h4 id="3-一般流程"><a href="#3-一般流程" class="headerlink" title="(3) 一般流程"></a>(3) 一般流程</h4><p>. 收集数据： 可以使用任何方法<br>. 准备数据： 距离计算所需要的数值，最好是结构化的数据格式<br>. 分析数据： 可以使用任何方法<br>. 训练算法： 此步骤不适用于 k-近邻算法<br>. 测试算法： 计算错误率<br>. 使用算法： 首先需要输入样本数据和结构化的输出结果，然后运行 K-近邻算法判定输入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。</p><h3 id="2-实施-kNN-分类算法"><a href="#2-实施-kNN-分类算法" class="headerlink" title="2. 实施 kNN 分类算法"></a>2. 实施 kNN 分类算法</h3><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p> $ d = \sqrt{(xA_0 - xB_0)^2 + (xA_1 - xB_1)^2}$</p><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><p>对未知类别属性的数据集中的每个点依次执行以下操作：<br>. 计算已知类别数据集中的点和当前点之间的距离；<br>. 按照距离递增次序排列；<br>. 选取与当前点距离最小的 k 个点;<br>. 确定前 k 个点所在类别的出现概率；<br>. 返回前 k 个点出现频率最高的类别作为当前点的预测分类；</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    // 计算距离</span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances ** <span class="number">0.5</span></span><br><span class="line">    </span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 选择距离最小的 k 个点</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    // 排序</span><br><span class="line">    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="3-归一化数值"><a href="#3-归一化数值" class="headerlink" title="3. 归一化数值"></a>3. 归一化数值</h3><p>数值相差太大的属性对计算结果有很大的影响，在处理不同取值范围的特征值时，可以将数值归一化，将任意取值范围的特征值转化为 [0, 1] 区间的值。</p><p> $ newValue = (oldValue - min) / (max - min)$</p><p>其中 min 和 max 分别是数据集中的最小特征值和最大特征值。</p><h4 id="归一化代码"><a href="#归一化代码" class="headerlink" title="归一化代码"></a>归一化代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoNorm</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    minVals = dataSet.min(<span class="number">0</span>)</span><br><span class="line">    maxVals = dataSet.max(<span class="number">0</span>)</span><br><span class="line">    rangeD = maxVals - minVals</span><br><span class="line">    normDataSet = zeros(shape(dataSet))</span><br><span class="line">    m = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    normDataSet = dataSet - tile(minVals, (m, <span class="number">1</span>))</span><br><span class="line">    normDataSet = normDataSet/tile(rangeD, (m, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> normDataSet, rangeD, minVals</span><br></pre></td></tr></table></figure><h3 id="4-测试算法"><a href="#4-测试算法" class="headerlink" title="4. 测试算法"></a>4. 测试算法</h3><p>机器学习算法一个很重要的工作就是评估算法的正确率，通常我们只提供已有数据的 90% 作为训练分类，使用剩下的 10% 数据去测试分类器，检测分类器的正确率。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><p>K-近邻算法是分类数据最简单最有效的算法，但是它的缺陷是无法给出任何数据的基础结构信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;h4 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;(1)定义&quot;&gt;
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://yxhuangch.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL 入门笔记（一）</title>
    <link href="https://yxhuangch.github.io/2018/01/15/opengl-note-one/"/>
    <id>https://yxhuangch.github.io/2018/01/15/opengl-note-one/</id>
    <published>2018-01-15T14:49:03.000Z</published>
    <updated>2018-01-15T15:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文笔记摘自于 ：<a href="https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/" target="_blank" rel="noopener">https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/</a></p><h3 id="绘制正方形和圆形"><a href="#绘制正方形和圆形" class="headerlink" title="绘制正方形和圆形"></a>绘制正方形和圆形</h3><h5 id="1-为什么需要将坐标复制进缓冲区（Buffer）里面"><a href="#1-为什么需要将坐标复制进缓冲区（Buffer）里面" class="headerlink" title="1. 为什么需要将坐标复制进缓冲区（Buffer）里面"></a>1. 为什么需要将坐标复制进缓冲区（Buffer）里面</h5><p>因为 Java 代码是运行在虚拟机中的，会有垃圾回收功能，所以，需要将坐标参照缓冲区里面。</p><h4 id="2-投影，相机位置-变换矩阵"><a href="#2-投影，相机位置-变换矩阵" class="headerlink" title="2. 投影，相机位置, 变换矩阵"></a>2. 投影，相机位置, 变换矩阵</h4><h5 id="（1）-变换矩阵"><a href="#（1）-变换矩阵" class="headerlink" title="（1）.变换矩阵"></a>（1）.变换矩阵</h5><p>因为 OpenGL 中的坐标是[-1, 1]，所以需要将坐标变换成 OpengGL 的坐标。<br>The projection matrix recalculates the coordinates of your graphics so that they map correctly to Android device screens.<br>The camera view matrix creates a transformation  that renders objects from a specific eye position.</p><p>在 OpenGL 中，要将坐标变换为标准化设备坐标，既每个坐标顶点的 x, y, z 坐标都在[-1, 1] 之间，这个过程需要几个坐标系统。</p><p>. 局部空间（Local Space） 或者成为物体空间（Object Space）<br>. 世界空间（World Space）<br>. 观察空间 (View Space) 或者成为视觉空间 (Eye Space)<br>. 裁剪空间 (Clip Space)<br>. 屏幕空间 (Screen Space)</p><p>坐标的转换过程<br><img src="/2018/01/15/opengl-note-one/transition.jpg" width="80%" height="60%"></p><ol><li>局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标；</li><li>下一步是将局部坐标变换为世界空间坐标，这些坐标相对于世界的全局原点，它们会和其他物体一起相对于世界原点进行摆放；</li><li>接下来是将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的；</li><li>在观察空间之后，将其投影到裁剪坐标。裁剪坐标会被处理至[-1, 1] 的范围内，并判断哪些顶点将会出现在屏幕上；</li><li>通过视口变换（Viewport Transform）的过程，将裁剪坐标变换为屏幕坐标。视口变换将位于 [-1, 1] 范围的坐标变换到由 glViewport 函数所定义的坐标范围内。将最终的坐标传入光栅器，使其转变为片段。</li></ol><h5 id="局部空间-Local-Space"><a href="#局部空间-Local-Space" class="headerlink" title="局部空间 (Local Space)"></a>局部空间 (Local Space)</h5><p>局部空间是指物体所在坐标空间，即对象最开始所在的地方，模型的所有点都是在局部空间中。</p><h5 id="世界空间-（World-Space）"><a href="#世界空间-（World-Space）" class="headerlink" title="世界空间 （World Space）"></a>世界空间 （World Space）</h5><p>当把物体放入到游戏世界空间中，那么物体的坐标将会从局部坐标变换为世界坐标，这个变换是由 Model Matrix 实现的。</p><h5 id="观察空间-（View-Space）"><a href="#观察空间-（View-Space）" class="headerlink" title="观察空间 （View Space）"></a>观察空间 （View Space）</h5><p>观察空间也被称为 Opengl 的 Camera, 它是从摄像机的视角所得到的空间，将世界空间坐标转化为用户视野前方的坐标而产生的结果。这个过程是将特定的对象，进过一系列的位移，旋转完成才。这个过程由 View Matrix 实现。</p><h5 id="裁剪空间-（Clip-Space）"><a href="#裁剪空间-（Clip-Space）" class="headerlink" title="裁剪空间 （Clip Space）"></a>裁剪空间 （Clip Space）</h5><p>OpenGL 期待所有的坐标都落在一个特定的范围之内，范围之外的点都被裁剪掉。将指定范围内的坐标转化为标准化设备坐标的范围[-1, 1], 这个过程由投影矩阵 Projection Matrix 实现。</p><h5 id="2-投影"><a href="#2-投影" class="headerlink" title="(2). 投影"></a>(2). 投影</h5><p>投影分为正投影和透视投影<br>. 正投影<br>    正投影是一个类似立方体的平头截体，是一个裁剪空间，在这个空间之外的顶点都会被裁剪掉。<br>    <img src="/2018/01/15/opengl-note-one/z_project.png" width="70%" height="50%"></p><p>创建正投影矩阵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glm::orthon(0.0f, 800.0f, 0.0f, 600.0f, 0.1f, 100.0f)</span><br></pre></td></tr></table></figure><p>   第一，第二个参数是平头截体的左右坐标；<br>   第三，第四个参数是平头截体的顶部和顶部；<br>   第五，第六个参数是近平面和远平面的距离；</p><p>. 透视投影<br>   <img src="/2018/01/15/opengl-note-one/t_project.png" width="70%" height="50%"><br>在透视投影中，顶点坐标的每个分量都会除以它的 w 分量，距离观察者越远顶点坐标就会越小。<br>创建透视投影坐标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glm:mat4 proj = glm::perspective(glm::radians(45.0f), (float)width/(float)height, 0.1f, 100.0f)</span><br></pre></td></tr></table></figure><p> fov 值表示视野（Field of View），并设置了观察空间的大小。通常设为 45.0f;<br> 第二个参数是宽高比；<br> 第三、第四个参数是平头截体的近和远平面，通常设置近距离为 0.1f, 远距离设为 100.0f;</p><h5 id="坐标组合在一起"><a href="#坐标组合在一起" class="headerlink" title="坐标组合在一起"></a>坐标组合在一起</h5><p>模型矩阵，观察矩阵和投影矩阵组合在一起，转变成裁剪坐标：</p><p> V<sub>clip</sub> = M<sub>projection</sub> <em> M<sub>view</sub> </em> V<sub>local</sub></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文笔记摘自于 ：&lt;a href=&quot;https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http
      
    
    </summary>
    
    
      <category term="opengl" scheme="https://yxhuangch.github.io/tags/opengl/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发中踩的坑</title>
    <link href="https://yxhuangch.github.io/2017/12/12/android-normal-bug/"/>
    <id>https://yxhuangch.github.io/2017/12/12/android-normal-bug/</id>
    <published>2017-12-12T11:54:03.000Z</published>
    <updated>2017-12-12T12:02:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-UniversalImageLoader-的坑"><a href="#1-UniversalImageLoader-的坑" class="headerlink" title="1. UniversalImageLoader 的坑"></a>1. UniversalImageLoader 的坑</h4><p>如果 options 设置了cacheOnDisk 为 true, 本地图片使用 ImageDownloader.Scheme.DRAWABLE.wrap 变成 url, 则可能出现图片 url 重复问题；</p><h4 id="2-Activity-Fragment-生命周期相关"><a href="#2-Activity-Fragment-生命周期相关" class="headerlink" title="2. Activity/Fragment 生命周期相关"></a>2. Activity/Fragment 生命周期相关</h4><p>. Activity#onPause() 调用后， 相应的 Animation 也会停止；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-UniversalImageLoader-的坑&quot;&gt;&lt;a href=&quot;#1-UniversalImageLoader-的坑&quot; class=&quot;headerlink&quot; title=&quot;1. UniversalImageLoader 的坑&quot;&gt;&lt;/a&gt;1. Univers
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSBrige 源码简要分析</title>
    <link href="https://yxhuangch.github.io/2017/11/18/JSBrige-source-code-analyze/"/>
    <id>https://yxhuangch.github.io/2017/11/18/JSBrige-source-code-analyze/</id>
    <published>2017-11-18T12:42:11.000Z</published>
    <updated>2017-11-18T13:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>JsBrige 作为 Android 与 js 交互的一个开源库，很多地方都用得到，最近有时间，看了一下源码，现在做一个简要的分析记录。<br>JsBrige 的地址 <a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="noopener">https://github.com/lzyzsd/JsBridge</a><br><br></p><h4 id="JS-调用-Native-方法-的过程"><a href="#JS-调用-Native-方法-的过程" class="headerlink" title="JS 调用 Native 方法 的过程"></a>JS 调用 Native 方法 的过程</h4><p>. 调用 BridgeWebView#registerHandler 进行注册；(Native)<br><br>. web 调用 WebViewJavascriptBridge.callHandler, 方法名与 第一步注册的方法名一致；(js) <br><br>. WebViewJavascriptBridge#_doSend() 改变 iframe.src；j<br><br>. 导致 WebViewClient#shouldOverrideUrlLoading() 重新加载; n<br><br>. BridgeWebView#flushMessageQueue –&gt; BridgeWebView#loadUrl() 将重新加载 url 将 _fetchQueue 回传到 js; n<br><br>. WebViewJavascriptBridge#_fetchQueue() 改变 ifram.src 将数据回传 native; js<br><br>. WebViewClient#shouldOverrideUrlLoaqueueMessageding() –&gt; BridgeWebView#handlerReturnData(); n<br><br>    . 根据回传的数据，将第一步注册的方法取出，调用其对应的 CallBackFunction#onCallBack 回到方法； n<br><br>    . 将 map 中注册的方法移除；n</p><p><br></p><h4 id="Native-调用-js-方法的过程"><a href="#Native-调用-js-方法的过程" class="headerlink" title="Native 调用 js 方法的过程"></a>Native 调用 js 方法的过程</h4><p>. WebViewJavascriptBridge#registerHandler() 注册 function name; j<br><br>    . BridgeWebView#callHandler() 将与js 约定好的 function name 穿进去； n<br><br>    . BridgeWebView#dosend() –&gt; BridgeWebView#queueMessage()<br>        –&gt; BridgeWebView#dispatchMessage() 将 javascript:WebViewJavascriptBridge._handleMessageFromNative 与 function name 整合<br>        –&gt; 调用 webview#loadUrl() 将数据传导 js ; n<br><br>    . WebViewJavascriptBridge#_dispatchMessageFromNative, 找到 相应的 function name<br>      –&gt; responseCallback –&gt; WebViewJavascriptBridge#_doSend() 将信息回传会 native ; js<br><br>    . 最后回调 onCallBack；</p><h4 id="JS-调用-Native-方法过程的流程图"><a href="#JS-调用-Native-方法过程的流程图" class="headerlink" title="JS 调用 Native 方法过程的流程图"></a>JS 调用 Native 方法过程的流程图</h4><p><img src="/2017/11/18/JSBrige-source-code-analyze/jsbrige1.png" width="100%" height="70%"></p><p><br></p><h4 id="Native-调用-js-方法的过程的流程图"><a href="#Native-调用-js-方法的过程的流程图" class="headerlink" title="Native 调用 js 方法的过程的流程图"></a>Native 调用 js 方法的过程的流程图</h4><p><img src="/2017/11/18/JSBrige-source-code-analyze/jsbrige2.png" width="100%" height="70%"></p><p><br></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>JsBrige 没有利用常规的 @JavascriptInterface 来进行 Android 与 js 的交互，而是采用 url 带参，拦截的方式，这不失为一种新的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JsBrige 作为 Android 与 js 交互的一个开源库，很多地方都用得到，最近有时间，看了一下源码，现在做一个简要的分析记录。&lt;br&gt;JsBrige 的地址 &lt;a href=&quot;https://github.com/lzyzsd/JsBridge&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="android" scheme="https://yxhuangch.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android Ndk CMakeLists 开发常见的错误</title>
    <link href="https://yxhuangch.github.io/2017/09/28/Android-ndk-CMakeLists/"/>
    <id>https://yxhuangch.github.io/2017/09/28/Android-ndk-CMakeLists/</id>
    <published>2017-09-28T15:09:09.000Z</published>
    <updated>2017-11-11T01:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="错误-1"><a href="#错误-1" class="headerlink" title="错误 1"></a>错误 1</h4><p>error This file requires compiler and library support for the ISO C++ 2011 standard 错误</p><p>解决方案：<br>在 CMakeLists 文件中添加   SET(CMAKE_CXX_FLAGS “-std=c++11 -O3”)<br><br></p><h4 id="错误-2"><a href="#错误-2" class="headerlink" title="错误 2"></a>错误 2</h4><p>‘asm/types.h’ file not found</p><p>解决方案：<br>在 CMakeLists 文件中添加  set(CMAKE_CXX_FLAGS “${CMAKE_C_FLAGS} ${CMAKE_CXX_FLAGS}”)</p><h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><p>错误： java.lang.UnsatisfiedLinkError: Unable to load native library “xxx.so”: undefined symbol: ANativeActivity_onCreate<br>    原因： This may mean that Java couldn’t find the ANativeActivity_onCreate function in your code, because it was stripped by the compliler.<br>    解决： 选择加上 app_dummy() 即可；<br>    相关链接： <a href="https://blog.beuc.net/posts/Make_sure_glue_isn__39__t_stripped/" target="_blank" rel="noopener">https://blog.beuc.net/posts/Make_sure_glue_isn__39__t_stripped/</a></p><h4 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h4><p>错误：  undefined reference to `EventLoop::EventLoop(android_app*)’<br>    原因： 头文件没有被引用<br>    解决： 查看 CMakeLists.txt 中是否已经添加 include_directories 指定头文件的路径<br>          . target_link_libraries 中库库链接的顺序有关，可以调整它们的前后顺序， target_link_libraries 里面库文件的顺序要符合 gcc 链接顺序的规则，<br>            即被依赖的库房子依赖它的库后面；<br>            例如<br>                target_link_libraries(hello A B.a C.so);<br>                A 依赖 B, 而 B 依赖 C<br>   相关链接：<a href="http://blog.csdn.net/zhujianwei31415/article/details/50727952" target="_blank" rel="noopener">http://blog.csdn.net/zhujianwei31415/article/details/50727952</a></p><h4 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a>错误5</h4><p>错误： error: unterminated conditional directive<br>解决： 在 .hpp 文件尾部添加 #endif</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;错误-1&quot;&gt;&lt;a href=&quot;#错误-1&quot; class=&quot;headerlink&quot; title=&quot;错误 1&quot;&gt;&lt;/a&gt;错误 1&lt;/h4&gt;&lt;p&gt;error This file requires compiler and library support for the 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello GuangZhou</title>
    <link href="https://yxhuangch.github.io/2017/08/20/Hello-GuangZhou/"/>
    <id>https://yxhuangch.github.io/2017/08/20/Hello-GuangZhou/</id>
    <published>2017-08-20T07:19:37.000Z</published>
    <updated>2017-08-20T08:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p> 欢迎到广州！<br>                2017.08.19<br><img src="/2017/08/20/Hello-GuangZhou/haizhuhu.jpeg" width="70%" height="50%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 欢迎到广州！&lt;br&gt;                2017.08.19&lt;br&gt;&lt;img src=&quot;/2017/08/20/Hello-GuangZhou/haizhuhu.jpeg&quot; width=&quot;70%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yxhuangch.github.io/2017/08/15/hello-world/"/>
    <id>https://yxhuangch.github.io/2017/08/15/hello-world/</id>
    <published>2017-08-15T15:56:07.000Z</published>
    <updated>2017-08-15T15:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
